name: Cleanup Past Events

on:
  schedule:
    # Run every day at 2 AM UTC (1 hour after training to avoid conflicts)
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering
    inputs:
      dry_run:
        description: 'Dry run mode (only show what would be deleted)'
        required: false
        default: false
        type: boolean
      days_buffer:
        description: 'Days buffer before deleting (default: 1)'
        required: false
        default: '1'
        type: string

jobs:
  cleanup-past-events:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install supabase python-dotenv
        
    - name: Cleanup past events
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
        DAYS_BUFFER: ${{ github.event.inputs.days_buffer || '1' }}
      run: |
        python -c "
        import os
        from datetime import datetime, timedelta
        from supabase import create_client, Client

        # Initialize Supabase client with service role for admin operations
        url = os.environ.get('SUPABASE_URL')
        # Use service role key for admin operations
        key = os.environ.get('SERVICE_ROLE_KEY') or os.environ.get('SUPABASE_ANON_KEY')
        dry_run = os.environ.get('DRY_RUN', 'false').lower() == 'true'
        days_buffer = int(os.environ.get('DAYS_BUFFER', '1'))

        if not url or not key:
            print('‚ùå Missing required environment variables')
            exit(1)

        supabase: Client = create_client(url, key)

        print(f'üîç Starting cleanup process (DRY_RUN: {dry_run}, DAYS_BUFFER: {days_buffer})')

        try:
            # Calculate cutoff timestamp (today - buffer days) in seconds (Unix timestamp)
            cutoff_timestamp = int((datetime.now() - timedelta(days=days_buffer)).timestamp()
            print(f'üìÖ Cutoff timestamp: {cutoff_timestamp} ({datetime.fromtimestamp(cutoff_timestamp).strftime(\"%Y-%m-%d\")})')
            
            # Query for past one-time events
            # We only delete one-time events, keep recurring/weekly events
            result = supabase.table('new_events').select('id, name, start_date, end_date, occurrence').execute()
            
            if not result.data:
                print('‚úÖ No events found in database')
                exit(0)
            
            events_to_delete = []
            total_events = len(result.data)
            
            for event in result.data:
                event_id = event.get('id')
                event_name = event.get('name', 'Unknown')
                start_date = event.get('start_date')
                end_date = event.get('end_date')
                occurrence = event.get('occurrence', '').lower()
                
                # Only consider deleting one-time events
                if occurrence in ['one-time', 'single']:
                    # Use end_date if available, otherwise use start_date
                    event_timestamp = end_date if end_date else start_date
                    
                    # Convert timestamp to date for comparison
                    if event_timestamp and isinstance(event_timestamp, (int, float)):
                        # Convert Unix timestamp (seconds) to datetime
                        event_datetime = datetime.fromtimestamp(event_timestamp)
                        event_date_str = event_datetime.strftime('%Y-%m-%d')
                        
                        if event_timestamp < cutoff_timestamp:
                            events_to_delete.append({
                                'id': event_id,
                                'name': event_name,
                                'date': event_date_str,
                                'timestamp': event_timestamp,
                                'occurrence': occurrence
                            })
                        else:
                            # Debug: Show events that are NOT being deleted
                            print(f'  üîç Event {event_id} ({event_name}) has date {event_date_str} (timestamp: {event_timestamp}) - NOT deleting (future event)')
            
            print(f'üìä Found {len(events_to_delete)} past events out of {total_events} total events')
            
            if not events_to_delete:
                print('‚úÖ No past events to delete')
                exit(0)
            
            # Display events to be deleted
            print('üìã Events to be deleted:')
            for event in events_to_delete[:10]:  # Show first 10
                print(f'  - ID: {event[\"id\"]}, Date: {event[\"date\"]} (timestamp: {event[\"timestamp\"]}), Name: {event[\"name\"][:50]}...')
            
            if len(events_to_delete) > 10:
                print(f'  ... and {len(events_to_delete) - 10} more events')
            
            if dry_run:
                print(f'üîç DRY RUN: Would delete {len(events_to_delete)} events (no actual deletion performed)')
                exit(0)
            
            # Perform deletion in batches
            batch_size = 50
            deleted_count = 0
            
            for i in range(0, len(events_to_delete), batch_size):
                batch = events_to_delete[i:i + batch_size]
                batch_ids = [event['id'] for event in batch]
                
                try:
                    delete_result = supabase.table('new_events').delete().in_('id', batch_ids).execute()
                    batch_deleted = len(batch_ids)
                    deleted_count += batch_deleted
                    print(f'‚úÖ Deleted batch {i//batch_size + 1}: {batch_deleted} events')
                    
                except Exception as e:
                    print(f'‚ùå Error deleting batch {i//batch_size + 1}: {str(e)}')
                    continue
            
            print(f'üéâ Cleanup completed! Deleted {deleted_count} past events')
            
            # Log summary
            remaining_result = supabase.table('new_events').select('id', count='exact').execute()
            remaining_count = remaining_result.count if remaining_result.count else 0
            
            print(f'üìà Summary:')
            print(f'  - Total events before: {total_events}')
            print(f'  - Events deleted: {deleted_count}')
            print(f'  - Events remaining: {remaining_count}')
            
        except Exception as e:
            print(f'‚ùå Error during cleanup: {str(e)}')
            exit(1)
        "
        
    - name: Cleanup Summary
      if: always()
      run: |
        echo "üèÅ Cleanup workflow completed"
        echo "Check the logs above for detailed results" 
